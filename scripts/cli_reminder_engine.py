#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# ===============================================
# CLI REMINDER ENGINE ‚Äì Interfaz Silenciosa de Control Total
# OBJETIVO: Crear, listar y eliminar recordatorios sin esperar a que VOSK transcriba ‚Äúrevisi√≥n‚Äù como ‚Äúprohibici√≥n‚Äù
# DEPENDENCIAS: ReminderPlugin, SchedulerPlugin, argparse, colorama y sentido com√∫n en modo texto
# MODO DE USO: Ideal cuando hablar no ayuda, y escuchar ser√≠a una p√©rdida de tiempo
# ===============================================

# =======================================================================
# 1. IMPORTACIONES Y CONFIGURACI√ìN
# =======================================================================

import os
import sys
import argparse
import sqlite3
from pathlib import Path
import logging
import colorama
from colorama import Fore, Style
import json
import re
from datetime import datetime, timedelta
from typing import List, Dict, Optional, Tuple
from services.plugins.reminder_plugin import ReminderPlugin

# Configurar rutas para importar m√≥dulos de TARS
SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
TARS_ROOT = os.path.dirname(SCRIPT_DIR)

# Intentar diferentes rutas posibles
possible_paths = [
    "/home/tarsadmin/tars_files",      # Ruta actual donde est√° todo
    TARS_ROOT,                         # Si est√° en scripts/ dentro del proyecto
    os.path.expanduser("~/TARS-BSK"),  # Ruta t√≠pica del proyecto
    os.path.expanduser("~/tars"),      # Otra ruta posible
    "/home/tarsadmin/TARS-BSK",        # Ruta absoluta t√≠pica
    "/home/tarsadmin/tars"             # Otra ruta absoluta
]

tars_found = False
for path in possible_paths:
    if os.path.exists(os.path.join(path, "modules", "reminder_parser.py")):
        sys.path.insert(0, path)
        print(f"üîç TARS encontrado en: {path}")
        tars_found = True
        break

if not tars_found:
    print("‚ùå Error: No se pudo encontrar el directorio de TARS.")
    print("üí° Rutas intentadas:")
    for path in possible_paths:
        exists = "‚úÖ" if os.path.exists(path) else "‚ùå"
        print(f"   {exists} {path}")
    print("\nüí° Soluciones:")
    print("   1. Ejecuta desde el directorio ra√≠z del proyecto TARS")
    print("   2. O edita las rutas en possible_paths[]")
    sys.exit(1)

try:
    # Importar las clases necesarias de TARS (rutas corregidas)
    from modules.reminder_parser import ReminderParser
    from services.plugins.scheduler_plugin import SchedulerPlugin
    print("‚úÖ M√≥dulos de TARS importados correctamente")
except ImportError as e:
    print(f"‚ùå Error importando m√≥dulos de TARS: {str(e)}")
    print(f"üí° TARS path actual: {sys.path[0]}")
    print("üí° Verifica que existan los archivos:")
    print("   - modules/reminder_parser.py")
    print("   - services/plugins/scheduler_plugin.py")
    print("   - services/plugins/reminder_plugin.py")
    sys.exit(1)

# Configurar colorama para que funcione en Windows
colorama.init()

# Configurar logging
logging.basicConfig(level=logging.ERROR, format='%(message)s')  # Solo errores cr√≠ticos
logger = logging.getLogger(__name__)

# Rutas principales - Ajustadas para acceder a los archivos de recordatorios
REMINDERS_DB_PATH = os.path.expanduser("~/tars_files/memory/reminders/")
CONFIG_PATH = os.path.expanduser("~/tars_files/config/")

# =======================================================================
# 2. FUNCIONES DE UTILIDAD Y CARGA DE DATOS
# =======================================================================

def inicializar_sistema_recordatorios():
    """
    Inicializa el sistema de recordatorios de TARS
    
    Returns:
        Tuple[ReminderParser, SchedulerPlugin]: Parser y scheduler inicializados
    """
    try:
        # Crear directorios si no existen
        os.makedirs(REMINDERS_DB_PATH, exist_ok=True)
        os.makedirs(CONFIG_PATH, exist_ok=True)
        
        # Inicializar scheduler
        scheduler = SchedulerPlugin()
        
        # ReminderParser necesita el scheduler directamente (no scheduler.scheduler)
        parser = ReminderParser(scheduler=scheduler)
        
        return parser, scheduler
    except Exception as e:
        print(f"{Fore.RED}‚ùå Error inicializando sistema de recordatorios: {str(e)}{Style.RESET_ALL}")
        print(f"{Fore.YELLOW}üí° Detalles del error: {str(e)}{Style.RESET_ALL}")
        
        # √öltimo intento: inicializar parser sin scheduler
        try:
            parser = ReminderParser()
            return parser, None
        except Exception as e2:
            print(f"{Fore.RED}‚ùå Error cr√≠tico: {str(e2)}{Style.RESET_ALL}")
            return None, None

def formatear_tiempo_natural(recordatorio: dict) -> str:
    """
    Convierte la informaci√≥n de tiempo del recordatorio a formato natural
    MEJORADO: Busca en m√∫ltiples campos de fecha
    
    Args:
        recordatorio: Diccionario con informaci√≥n del recordatorio
        
    Returns:
        String con el tiempo en formato natural
    """
    try:
        # Buscar fecha en diferentes campos posibles
        fecha = None
        posibles_campos = ['next_run_time', 'scheduled_time', 'datetime', 'time', 'date', 'when']
        
        for campo in posibles_campos:
            if campo in recordatorio and recordatorio[campo]:
                fecha = recordatorio[campo]
                break
        
        # Si no encontramos fecha, intentar extraer de otros campos
        if not fecha:
            # Buscar en campo 'msg' o 'description' por patrones de fecha
            msg = recordatorio.get('msg', '') or recordatorio.get('description', '')
            if 'ma√±ana' in msg.lower():
                return "ma√±ana (extra√≠do del texto)"
            elif 'hoy' in msg.lower():
                return "hoy (extra√≠do del texto)"
            elif any(dia in msg.lower() for dia in ['lunes', 'martes', 'mi√©rcoles', 'jueves', 'viernes', 's√°bado', 'domingo']):
                return "esta semana (extra√≠do del texto)"
            else:
                return "‚ö†Ô∏è Fecha no especificada en el texto"
        
        # Si es un string de datetime, parsearlo
        if isinstance(fecha, str):
            try:
                dt = datetime.fromisoformat(fecha.replace('Z', '+00:00'))
            except:
                # Si no se puede parsear, devolverlo tal como est√°
                return f"{fecha} (formato sin parsear)"
        else:
            dt = fecha
        
        # Formatear a espa√±ol
        ahora = datetime.now()
        
        # Si es hoy
        if dt.date() == ahora.date():
            return f"hoy a las {dt.strftime('%H:%M')}"
        
        # Si es ma√±ana
        elif dt.date() == (ahora + timedelta(days=1)).date():
            return f"ma√±ana a las {dt.strftime('%H:%M')}"
        
        # Si es esta semana
        elif dt.date() <= (ahora + timedelta(days=7)).date():
            dias = ['lunes', 'martes', 'mi√©rcoles', 'jueves', 'viernes', 's√°bado', 'domingo']
            dia_semana = dias[dt.weekday()]
            return f"{dia_semana} a las {dt.strftime('%H:%M')}"
        
        # Fecha lejana
        else:
            return dt.strftime('%d/%m/%Y a las %H:%M')
            
    except Exception as e:
        # En lugar de "Fecha no v√°lida", ser m√°s espec√≠fico
        return f"‚ö†Ô∏è Error procesando fecha: {str(e)}"

def obtener_estadisticas_recordatorios(parser: ReminderParser) -> Dict:
    """
    Obtiene estad√≠sticas completas de los recordatorios
    
    Args:
        parser: ReminderParser inicializado
        
    Returns:
        Diccionario con estad√≠sticas
    """
    try:
        recordatorios = parser.list_reminders()
        
        if not recordatorios:
            return {
                'total': 0,
                'por_categoria': {},
                'proximos_7_dias': 0,
                'vencidos': 0
            }
        
        # Contar por categor√≠as
        categorias = {}
        proximos = 0
        vencidos = 0
        ahora = datetime.now()
        
        for recordatorio in recordatorios:
            # Categor√≠a
            categoria = recordatorio.get('category', 'Sin categor√≠a')
            categorias[categoria] = categorias.get(categoria, 0) + 1
            
            # Pr√≥ximos 7 d√≠as
            try:
                fecha_str = recordatorio.get('time', '')
                if fecha_str:
                    if isinstance(fecha_str, str):
                        fecha = datetime.fromisoformat(fecha_str.replace('Z', '+00:00'))
                    else:
                        fecha = fecha_str
                    
                    # Pr√≥ximos 7 d√≠as
                    if fecha.date() <= (ahora + timedelta(days=7)).date():
                        proximos += 1
                    
                    # Vencidos
                    if fecha < ahora:
                        vencidos += 1
            except:
                pass  # Ignorar errores de fecha
        
        return {
            'total': len(recordatorios),
            'por_categoria': categorias,
            'proximos_7_dias': proximos,
            'vencidos': vencidos
        }
        
    except Exception as e:
        print(f"{Fore.RED}‚ùå Error obteniendo estad√≠sticas: {str(e)}{Style.RESET_ALL}")
        return {'total': 0, 'por_categoria': {}, 'proximos_7_dias': 0, 'vencidos': 0}

# =======================================================================
# 3. COMANDOS DEL CLI - OPERACIONES DE CONSULTA
# =======================================================================

def comando_list(args):
    """Lista todos los recordatorios con numeraci√≥n para eliminaci√≥n f√°cil"""
    print(f"{Fore.BLUE}‚è≥ Obteniendo tus recordatorios desde el motor de TARS...{Style.RESET_ALL}")
    
    # =======================================================================
    # 3.1 INICIALIZACI√ìN Y OBTENCI√ìN DE DATOS
    # =======================================================================
    
    parser, scheduler = inicializar_sistema_recordatorios()
    if not parser:
        print(f"{Fore.RED}‚ùå No se pudo inicializar el sistema de recordatorios{Style.RESET_ALL}")
        return
    
    recordatorios = parser.list_reminders()
    
    if not recordatorios:
        print(f"{Fore.YELLOW}‚ö†Ô∏è No tienes recordatorios programados{Style.RESET_ALL}")
        return
    
    # =======================================================================
    # 3.2 CLASIFICACI√ìN Y PRESENTACI√ìN CON NUMERACI√ìN
    # =======================================================================
    
    # Separar por categor√≠as
    categorias = {}
    for recordatorio in recordatorios:
        cat = recordatorio.get('category', 'Sin categor√≠a')
        if cat not in categorias:
            categorias[cat] = []
        categorias[cat].append(recordatorio)
    
    print(f"\n{Fore.GREEN}üìã TODOS TUS RECORDATORIOS ({len(recordatorios)} total):{Style.RESET_ALL}")
    
    numero_global = 1
    
    for categoria, items in categorias.items():
        print(f"\n{Fore.CYAN}üè∑Ô∏è {categoria.upper()} ({len(items)}):{Style.RESET_ALL}")
        
        for recordatorio in items:
            descripcion = recordatorio.get('msg', 'Sin descripci√≥n')
            job_id = recordatorio.get('id', 'sin_id')
            tiempo = formatear_tiempo_natural(recordatorio)
            
            print(f"  {Fore.WHITE}{numero_global}.{Style.RESET_ALL} {descripcion}")
            print(f"     ‚è∞ {tiempo}")
            print(f"     üîë ID: {job_id}")
            
            numero_global += 1
    
    # CHEATSHEET COMPLETO
    print(f"\n{Fore.BLUE}üí° COMANDOS DISPONIBLES:{Style.RESET_ALL}")
    print(f"  {Fore.GREEN}üìã Gesti√≥n b√°sica:{Style.RESET_ALL}")
    print(f"    python3 scripts/cli_reminder_engine.py list")
    print(f"    python3 scripts/cli_reminder_engine.py add \"Comprar caf√© ma√±ana 8am\"")
    print(f"    python3 scripts/cli_reminder_engine.py delete 2")
    print(f"    python3 scripts/cli_reminder_engine.py delete job_0005")
    print(f"  {Fore.CYAN}üîç B√∫squeda y an√°lisis:{Style.RESET_ALL}")
    print(f"    python3 scripts/cli_reminder_engine.py search \"m√©dico\"")
    print(f"    python3 scripts/cli_reminder_engine.py stats")
    print(f"  {Fore.YELLOW}üß™ Testing y debug:{Style.RESET_ALL}")
    print(f"    python3 scripts/cli_reminder_engine.py test \"elimina recordatorio n√∫mero 3\"")

def comando_search(args):
    """Busca recordatorios por palabra clave"""
    if not args.texto:
        print(f"{Fore.RED}‚ùå Debes especificar un texto para buscar{Style.RESET_ALL}")
        return
    
    # =======================================================================
    # 3.3 B√öSQUEDA EN RECORDATORIOS
    # =======================================================================
    
    parser, scheduler = inicializar_sistema_recordatorios()
    if not parser:
        print(f"{Fore.RED}‚ùå No se pudo inicializar el sistema de recordatorios{Style.RESET_ALL}")
        return
    
    recordatorios = parser.list_reminders(filter_text=args.texto)
    
    if not recordatorios:
        print(f"{Fore.YELLOW}‚ö†Ô∏è No se encontraron recordatorios que contengan '{args.texto}'{Style.RESET_ALL}")
        return
    
    print(f"{Fore.GREEN}‚úÖ Resultados de b√∫squeda para '{args.texto}' ({len(recordatorios)} encontrados):{Style.RESET_ALL}")
    
    for i, recordatorio in enumerate(recordatorios, 1):
        descripcion = recordatorio.get('msg', 'Sin descripci√≥n')
        categoria = recordatorio.get('category', 'Sin categor√≠a')
        tiempo = formatear_tiempo_natural(recordatorio)
        job_id = recordatorio.get('id', 'sin_id')
        
        print(f"  {i}. üìÖ {descripcion}")
        print(f"     üè∑Ô∏è [{categoria}] ‚è∞ {tiempo}")
        print(f"     üîë {job_id}")

def comando_stats(args):
    """Muestra estad√≠sticas completas de los recordatorios"""
    print(f"{Fore.BLUE}‚è≥ Calculando estad√≠sticas de recordatorios...{Style.RESET_ALL}")
    
    # =======================================================================
    # 3.4 RECOPILACI√ìN DE ESTAD√çSTICAS GENERALES
    # =======================================================================
    
    parser, scheduler = inicializar_sistema_recordatorios()
    if not parser:
        print(f"{Fore.RED}‚ùå No se pudo inicializar el sistema de recordatorios{Style.RESET_ALL}")
        return
    
    stats = obtener_estadisticas_recordatorios(parser)
    
    print(f"\n{Fore.BLUE}üìä ESTAD√çSTICAS DE RECORDATORIOS{Style.RESET_ALL}")
    print(f"  Total de recordatorios: {stats['total']}")
    print(f"  Pr√≥ximos 7 d√≠as: {stats['proximos_7_dias']}")
    print(f"  Vencidos: {stats['vencidos']}")
    
    # =======================================================================
    # 3.5 ESTAD√çSTICAS POR CATEGOR√çA
    # =======================================================================
    
    if stats['por_categoria']:
        print(f"\n{Fore.BLUE}üìä RECORDATORIOS POR CATEGOR√çA{Style.RESET_ALL}")
        for categoria, count in sorted(stats['por_categoria'].items(), key=lambda x: x[1], reverse=True):
            print(f"  {categoria}: {count}")
    
    # =======================================================================
    # 3.6 PR√ìXIMOS RECORDATORIOS
    # =======================================================================
    
    recordatorios = parser.list_reminders()
    if recordatorios:
        # Ordenar por fecha
        try:
            recordatorios_ordenados = sorted(recordatorios, key=lambda x: x.get('time', ''))
            proximos = recordatorios_ordenados[:3]  # Top 3
            
            print(f"\n{Fore.BLUE}‚è∞ PR√ìXIMOS 3 RECORDATORIOS{Style.RESET_ALL}")
            for i, recordatorio in enumerate(proximos, 1):
                descripcion = recordatorio.get('msg', 'Sin descripci√≥n')
                tiempo = formatear_tiempo_natural(recordatorio)
                print(f"  {i}. {descripcion} - {tiempo}")
        except:
            pass  # Ignorar errores de ordenaci√≥n
    
    # Mostrar comandos disponibles
    print(f"\n{Fore.BLUE}üí° GESTI√ìN R√ÅPIDA:{Style.RESET_ALL}")
    print(f"    python3 scripts/cli_reminder_engine.py add \"nuevo recordatorio\"")
    print(f"    python3 scripts/cli_reminder_engine.py delete <n√∫mero>")
    print(f"    python3 scripts/cli_reminder_engine.py search <texto>")

# =======================================================================
# 4. COMANDOS DEL CLI - OPERACIONES DE MODIFICACI√ìN
# =======================================================================

def comando_add(args):
    """A√±ade un nuevo recordatorio al sistema"""
    if not args.texto:
        print(f"{Fore.RED}‚ùå Debes especificar un texto para el recordatorio{Style.RESET_ALL}")
        return
    
    # =======================================================================
    # 4.1 INICIALIZACI√ìN Y PREPARACI√ìN
    # =======================================================================
    
    parser, scheduler = inicializar_sistema_recordatorios()
    if not parser:
        print(f"{Fore.RED}‚ùå No se pudo inicializar el sistema de recordatorios{Style.RESET_ALL}")
        return
    
    # Preparar texto del recordatorio
    texto_recordatorio = args.texto.strip()
    categoria = args.categoria if args.categoria else "CLI"
    
    try:
        # =======================================================================
        # 4.2 CREACI√ìN DEL RECORDATORIO
        # =======================================================================
        
        # Usar el parser para crear el recordatorio
        # 1. Parsear texto
        resultado = parser.parse(texto_recordatorio)

        # 2. Verificar si hay feedback del parser (intenci√≥n pero sin fecha)
        if resultado:
            if "feedback" in resultado:
                print(f"{Fore.YELLOW}‚ùì {resultado['feedback']}{Style.RESET_ALL}")
                return
            if not resultado.get("fecha") or not resultado.get("hora"):
                print(f"{Fore.RED}‚ùå No pude detectar una fecha v√°lida. ¬øPuedes ser m√°s espec√≠fico?{Style.RESET_ALL}")
                return
        else:
            print(f"{Fore.RED}‚ùå No pude entender el recordatorio. ¬øPuedes reformularlo?{Style.RESET_ALL}")
            return

        # 3. Crear recordatorio usando el plugin real y su m√©todo process_command
        plugin = ReminderPlugin(scheduler)
        
        # Construir un comando que el plugin pueda entender
        comando = f"recu√©rdame {texto_recordatorio}"
        
        # Llamar a process_command en lugar de create
        creado = plugin.process_command(comando)

        # 4. Confirmaci√≥n
        if creado and ("creado" in creado.lower() or "programado" in creado.lower()):
            print(f"{Fore.GREEN}‚úÖ {creado}{Style.RESET_ALL}")
        else:
            print(f"{Fore.YELLOW}‚ö†Ô∏è No se pudo crear el recordatorio. Respuesta: {creado}{Style.RESET_ALL}")

            
    except Exception as e:
        print(f"{Fore.RED}‚ùå Error al crear recordatorio: {str(e)}{Style.RESET_ALL}")
        # Imprimir la traza completa para ayudar en depuraci√≥n
        import traceback
        traceback.print_exc()

def comando_delete(args):
    """Elimina un recordatorio por n√∫mero o ID"""
    if not args.identificador:
        print(f"{Fore.RED}‚ùå Debes especificar un n√∫mero o ID para eliminar{Style.RESET_ALL}")
        return
    
    # =======================================================================
    # 4.3 ELIMINACI√ìN POR N√öMERO O ID
    # =======================================================================
    
    parser, scheduler = inicializar_sistema_recordatorios()
    if not parser:
        print(f"{Fore.RED}‚ùå No se pudo inicializar el sistema de recordatorios{Style.RESET_ALL}")
        return
    
    try:
        identificador = args.identificador.strip()
        
        # Si es un n√∫mero, eliminar por posici√≥n
        if identificador.isdigit():
            numero = int(identificador)
            recordatorios = parser.list_reminders()
            
            if not recordatorios:
                print(f"{Fore.YELLOW}‚ö†Ô∏è No tienes recordatorios para eliminar{Style.RESET_ALL}")
                return
            
            if numero < 1 or numero > len(recordatorios):
                print(f"{Fore.RED}‚ùå N√∫mero inv√°lido. Tienes {len(recordatorios)} recordatorios (del 1 al {len(recordatorios)}){Style.RESET_ALL}")
                return
            
            # Obtener recordatorio por posici√≥n (convertir a 0-based)
            recordatorio_target = recordatorios[numero - 1]
            job_id = recordatorio_target['id']
            descripcion = recordatorio_target['msg']
            
            # Eliminar
            resultado = parser.remove_reminder(job_id)
            
            if "eliminado" in resultado.lower():
                print(f"{Fore.GREEN}‚úÖ Eliminado recordatorio n√∫mero {numero}: {descripcion}{Style.RESET_ALL}")
            else:
                print(f"{Fore.YELLOW}‚ö†Ô∏è {resultado}{Style.RESET_ALL}")
        
        else:
            # Eliminar por ID directamente
            resultado = parser.remove_reminder(identificador)
            
            if "eliminado" in resultado.lower():
                print(f"{Fore.GREEN}‚úÖ {resultado}{Style.RESET_ALL}")
            else:
                print(f"{Fore.YELLOW}‚ö†Ô∏è {resultado}{Style.RESET_ALL}")
            
    except Exception as e:
        print(f"{Fore.RED}‚ùå Error al eliminar recordatorio: {str(e)}{Style.RESET_ALL}")

def comando_test(args):
    """Prueba patrones de regex para comandos de recordatorios"""
    if not args.texto:
        print(f"{Fore.RED}‚ùå Debes especificar un texto para probar{Style.RESET_ALL}")
        return
    
    # =======================================================================
    # 4.4 TESTING DE PATRONES REGEX
    # =======================================================================
    
    parser, scheduler = inicializar_sistema_recordatorios()
    if not parser:
        print(f"{Fore.RED}‚ùå No se pudo inicializar el sistema de recordatorios{Style.RESET_ALL}")
        return
    
    texto = args.texto.strip()
    
    print(f"{Fore.BLUE}üß™ TESTING DE PATRONES PARA: '{texto}'{Style.RESET_ALL}")
    
    # Obtener patrones del ReminderPlugin
    try:
        # Simular la detecci√≥n de comando
        from services.plugins.reminder_plugin import ReminderPlugin
        plugin = ReminderPlugin()
        
        # Acceder a los patrones (si est√°n disponibles)
        if hasattr(plugin, 'COMMAND_PATTERNS'):
            patrones = plugin.COMMAND_PATTERNS
            
            print(f"\n{Fore.CYAN}üîç PROBANDO PATRONES:{Style.RESET_ALL}")
            
            encontrado = False
            for tipo_comando, lista_patrones in patrones.items():
                for patron in lista_patrones:
                    match = re.search(patron, texto, re.IGNORECASE)
                    if match:
                        encontrado = True
                        captura = match.group(1) if match.groups() else ""
                        print(f"  ‚úÖ {Fore.GREEN}{tipo_comando}{Style.RESET_ALL}: '{patron}'")
                        print(f"     Captura: '{captura}'")
                        print()
            
            if not encontrado:
                print(f"  ‚ùå {Fore.YELLOW}No se encontr√≥ ning√∫n patr√≥n que coincida{Style.RESET_ALL}")
        else:
            print(f"{Fore.YELLOW}‚ö†Ô∏è No se pudieron acceder a los patrones del plugin{Style.RESET_ALL}")
            
    except Exception as e:
        print(f"{Fore.RED}‚ùå Error en testing: {str(e)}{Style.RESET_ALL}")

# =======================================================================
# 5. CONFIGURACI√ìN DE ARGUMENTOS Y PARSER PRINCIPAL
# =======================================================================

def main():
    """Funci√≥n principal del CLI"""
    parser = argparse.ArgumentParser(
        description='TARS CLI REMINDER ENGINE - Gesti√≥n de recordatorios sin despertar al vecindario',
        epilog='Porque a veces es mejor escribir que hablar. Especialmente a las 3 AM.'
    )
    subparsers = parser.add_subparsers(dest='comando', help='Comandos disponibles')
    
    # =======================================================================
    # 5.1 DEFINICI√ìN DE SUBCOMANDOS
    # =======================================================================
    
    # Comando list
    list_parser = subparsers.add_parser('list', help='Listar todos los recordatorios con numeraci√≥n')
    
    # Comando add
    add_parser = subparsers.add_parser('add', help='A√±adir un nuevo recordatorio')
    add_parser.add_argument('texto', help='Texto del recordatorio (incluye fecha/hora)')
    add_parser.add_argument('-c', '--categoria', help='Categor√≠a del recordatorio', default='CLI')
    
    # Comando search
    search_parser = subparsers.add_parser('search', help='Buscar recordatorios por palabra clave')
    search_parser.add_argument('texto', help='Texto a buscar')
    
    # Comando delete
    delete_parser = subparsers.add_parser('delete', help='Eliminar un recordatorio por n√∫mero o ID')
    delete_parser.add_argument('identificador', help='N√∫mero del recordatorio (del comando list) o ID del job')
    
    # Comando stats
    stats_parser = subparsers.add_parser('stats', help='Mostrar estad√≠sticas de recordatorios')
    
    # Comando test
    test_parser = subparsers.add_parser('test', help='Probar patrones de regex para comandos')
    test_parser.add_argument('texto', help='Texto de comando a probar')
    
    args = parser.parse_args()
    
    # =======================================================================
    # 5.2 DISTRIBUCI√ìN DE COMANDOS
    # =======================================================================
    
    # Si no se especifica comando, mostrar ayuda √âPICA
    if not args.comando:
        print(f"\n{Fore.BLUE}ü§ñ TARS CLI REMINDER ENGINE{Style.RESET_ALL}")
        print(f"{Fore.CYAN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê{Style.RESET_ALL}")
        print(f"\n{Fore.GREEN}üìã COMANDOS DE GESTI√ìN:{Style.RESET_ALL}")
        print(f"  list                    # Lista todos los recordatorios")
        print(f"  add \"texto\"              # Crea nuevo recordatorio")
        print(f"  delete <n√∫mero>         # Elimina por n√∫mero de lista")
        print(f"  delete <job_id>         # Elimina por ID directo")
        print(f"\n{Fore.CYAN}üîç COMANDOS DE B√öSQUEDA:{Style.RESET_ALL}")
        print(f"  search \"palabra\"         # Busca recordatorios")
        print(f"  stats                   # Estad√≠sticas completas")
        print(f"\n{Fore.YELLOW}üß™ COMANDOS DE DEBUG:{Style.RESET_ALL}")
        print(f"  test \"comando\"           # Prueba patrones de regex")
        print(f"\n{Fore.GREEN}üìù EJEMPLOS PR√ÅCTICOS:{Style.RESET_ALL}")
        print(f"  python3 scripts/cli_reminder_engine.py list")
        print(f"  python3 scripts/cli_reminder_engine.py add \"Llamar dentista ma√±ana 10am\"")
        print(f"  python3 scripts/cli_reminder_engine.py delete 2")
        print(f"  python3 scripts/cli_reminder_engine.py search \"m√©dico\"")
        print(f"  python3 scripts/cli_reminder_engine.py test \"elimina recordatorio 3\"")
        print(f"\n{Fore.BLUE}üí° Tip: Usa n√∫meros para eliminar f√°cilmente (del comando list){Style.RESET_ALL}")
        return
    
    # Ejecutar el comando correspondiente
    if args.comando == 'list':
        comando_list(args)
    elif args.comando == 'add':
        comando_add(args)
    elif args.comando == 'search':
        comando_search(args)
    elif args.comando == 'delete':
        comando_delete(args)
    elif args.comando == 'stats':
        comando_stats(args)
    elif args.comando == 'test':
        comando_test(args)

# =======================================================================
# 6. EJECUCI√ìN PRINCIPAL Y MANEJO DE EXCEPCIONES
# =======================================================================

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print(f"\n{Fore.YELLOW}‚ö†Ô∏è Operaci√≥n cancelada por el usuario. Los recordatorios siguen ah√≠, tranquilo.{Style.RESET_ALL}")
    except Exception as e:
        print(f"\n{Fore.RED}‚ùå Error inesperado: {str(e)}{Style.RESET_ALL}")
        print(f"{Fore.YELLOW}üí° Tip: Aseg√∫rate de estar ejecutando desde el directorio correcto de TARS{Style.RESET_ALL}")

# ===============================================
# ESTADO: OPERATIVO Y SOSPECHOSAMENTE SILENCIOSO
# √öLTIMA ACTUALIZACI√ìN: Justo despu√©s de ejecutar 6 eliminaciones sin pedir confirmaci√≥n
# FILOSOF√çA: ‚ÄúLos comandos no se discuten. Se ejecutan.‚Äù
# VALIDADO EN: Consolas remotas, crontabs, y momentos en los que la voz no tiene cabida
# ===============================================
#
#     THIS IS THE SILENT WAY
#     (porque algunos recordatorios es mejor crearlos en secreto)
#
# ===============================================
