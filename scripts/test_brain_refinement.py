# ===============================================  
# TARSBRAIN TESTING - Validador de Refinamiento Cognitivo para TARS-BSK  
# Objetivo: Torturar sistem√°ticamente a TARSBrain con inputs diab√≥licos hasta que confiese sus l√≠mites  
# Dependencias: time, json, pathlib, y resistencia psicol√≥gica para presenciar 43 casos de refinamiento  
# ===============================================

# =======================================================================
# 1. IMPORTACIONES Y CONFIGURACI√ìN INICIAL
# =======================================================================
import sys
import os
from pathlib import Path
import time
import json
from datetime import datetime

# Add core directory to path
core_path = Path(__file__).parent.parent / "core"
sys.path.insert(0, str(core_path))

try:
    from tars_brain import TARSBrain
    print("‚úÖ TARSBrain imported successfully")
except ImportError as e:
    print(f"‚ùå Error importing TARSBrain: {e}")
    sys.exit(1)

# =======================================================================
# 2. MOCKS PARA TESTING
# =======================================================================

class MockMemory:
    """Mock memory system for testing"""
    def __init__(self):
        self.calls = []
    
    def log_call(self, method, args):
        self.calls.append(f"{method}({args})")

class MockLLM:
    """Mock LLM system for testing"""
    def __init__(self):
        self.calls = []
    
    def log_call(self, method, args):
        self.calls.append(f"{method}({args})")

def create_test_brain(is_simple=False, force_mode=False):
    """
    Crea instancia de TARSBrain para testing
    
    Args:
        is_simple: Modo emp√°tico vs sarc√°stico
        force_mode: Fuerza refinamiento para testing
    """
    brain = TARSBrain(MockMemory(), MockLLM(), is_simple=is_simple, force_mode=force_mode)
    brain._RESPONSE_CACHE.clear()  # Ensure clean cache
    return brain

# =======================================================================
# 3. CATEGOR√çAS DE TESTING
# =======================================================================

def test_category_short_responses():
    """
    Respuestas cortas que pueden requerir refinamiento
    """
    return [
        ("Monosyllabic yes", "S√≠"),
        ("Monosyllabic no", "No"),
        ("Single word", "Correcto"),
        ("Brief confirmation", "Exacto"),
        ("Incomplete thought", "Bueno"),
        ("Casual response", "Vale"),
        ("Thinking aloud", "Mmm"),
        ("Uncertain", "Quiz√°s"),
        ("No punctuation", "Eso depende"),
        ("Trailing comma", "Claro,"),
    ]

def test_category_conversational():
    """
    Respuestas conversacionales bien formadas
    """
    return [
        ("Technical explanation", "Un router es un dispositivo de red que conecta m√∫ltiples redes."),
        ("Complete answer", "Los protocolos TCP/IP permiten la comunicaci√≥n entre dispositivos en internet."),
        ("Helpful response", "Para configurar la red, primero necesitas acceder al panel de administraci√≥n."),
        ("Question response", "¬øTe refieres a la configuraci√≥n de DNS o DHCP?"),
        ("Enthusiastic", "¬°Excelente pregunta sobre seguridad inform√°tica!"),
        ("Informative", "La memoria RAM almacena datos temporalmente mientras el procesador los necesita."),
        ("Step-by-step", "Primero abre el terminal, luego escribe el comando y presiona Enter."),
    ]

def test_category_real_queries():
    """
    Consultas
    """
    return [
        ("Simple tech question", "qu√© es un router"),
        ("Casual statement", "el agua moja"),
        ("Gratitude", "gracias por la explicaci√≥n"),
        ("Follow-up", "y qu√© m√°s"),
        ("Clarification", "no entiendo"),
        ("Basic question", "c√≥mo funciona"),
        ("Appreciation", "muy interesante"),
        ("Continuation", "cu√©ntame m√°s"),
        ("Agreement", "tienes raz√≥n"),
        ("Request", "expl√≠came mejor"),
    ]

def test_category_system_responses():
    """
    Respuestas que el sistema podr√≠a generar con problemas de formato
    """
    return [
        ("Incomplete explanation", "Los sistemas operativos gestionan"),
        ("Cut-off response", "Para instalar el software necesitas"),
        ("Abrupt ending", "La configuraci√≥n requiere acceso"),
        ("Missing punctuation", "Todo funciona correctamente"),
        ("Informal ending", "Bueno, eso es todo"),
        ("Hesitant response", "Creo que s√≠"),
        ("Partial answer", "Depende de varios factores"),
    ]

def test_category_edge_realistic():
    """
    Casos l√≠mite que pueden ocurrir en conversaci√≥n
    """
    return [
        ("Very short question", "por qu√©"),
        ("Minimal response", "ah"),
        ("Thinking", "veamos"),
        ("Acknowledgment", "entiendo"),
        ("Surprise", "vaya"),
        ("Confusion", "qu√©"),
        ("Single letter", "a"),
        ("Spaces only", "   "),
        ("Just punctuation", "..."),
    ]

# =======================================================================
# 4. MOTOR DE AN√ÅLISIS
# =======================================================================

def analyze_brain_behavior(test_categories):
    """
    An√°lisis comprehensivo del comportamiento de TARSBrain
    """
    
    results = {
        'should_activate': [],
        'should_not_activate': [],
        'unexpected_behavior': [],
        'realistic_analysis': [],
        'performance_metrics': {},
        'brain_statistics': {
            'normal_mode': {'total': 0, 'refined': 0, 'unchanged': 0},
            'forced_mode': {'total': 0, 'refined': 0, 'unchanged': 0}
        }
    }
    
    total_tests = sum(len(category[1]) for category in test_categories)
    current_test = 0
    
    print(f"\nüß™ Testing TARSBrain with {total_tests} test cases")
    print("=" * 80)
    
    for category_name, test_cases in test_categories:
        print(f"\nüìÇ CATEGORY: {category_name}")
        print("-" * 40)
        
        for descripcion, texto_original in test_cases:
            current_test += 1
            progress = (current_test / total_tests) * 100
            
            print(f"[{progress:5.1f}%] {descripcion}")
            print(f"   üìù INPUT: '{texto_original}'")
            
            # =======================================================================
            # 4.1 TESTING EN MODO NORMAL
            # =======================================================================
            brain_normal = create_test_brain(is_simple=False, force_mode=False)
            start_time = time.time()
            resultado_normal = brain_normal.refine_response_if_needed(
                texto_original, "test_prompt", {}
            )
            normal_time = (time.time() - start_time) * 1000  # in ms
            
            # =======================================================================
            # 4.2 TESTING EN MODO FORZADO
            # =======================================================================
            brain_forced = create_test_brain(is_simple=False, force_mode=True)
            start_time = time.time()
            resultado_forzado = brain_forced.refine_response_if_needed(
                texto_original, "test_prompt", {}
            )
            forced_time = (time.time() - start_time) * 1000  # in ms
            
            # =======================================================================
            # 4.3 AN√ÅLISIS DE COMPORTAMIENTO
            # =======================================================================
            normal_changed = resultado_normal != texto_original
            forced_changed = resultado_forzado != texto_original
            
            realistic_analysis = {
                'description': descripcion,
                'input': texto_original,
                'normal_output': resultado_normal,
                'category': category_name,
                'should_activate': len(texto_original.strip()) <= 20 or not texto_original.strip().endswith(('.', '!', '?')),
                'did_activate': normal_changed,
                'behavior_correct': None
            }
            
            # Determinar si el comportamiento es correcto
            if realistic_analysis['should_activate'] == realistic_analysis['did_activate']:
                realistic_analysis['behavior_correct'] = True
            else:
                realistic_analysis['behavior_correct'] = False
            
            results['realistic_analysis'].append(realistic_analysis)
            
            # =======================================================================
            # 4.4 ACTUALIZACI√ìN DE ESTAD√çSTICAS
            # =======================================================================
            results['brain_statistics']['normal_mode']['total'] += 1
            results['brain_statistics']['forced_mode']['total'] += 1
            
            if normal_changed:
                results['brain_statistics']['normal_mode']['refined'] += 1
                print(f"   üîß NORMAL: '{resultado_normal}' ({normal_time:.2f}ms)")
            else:
                results['brain_statistics']['normal_mode']['unchanged'] += 1
                print(f"   ‚úÖ NORMAL: No changes ({normal_time:.2f}ms)")
            
            if forced_changed:
                results['brain_statistics']['forced_mode']['refined'] += 1
                print(f"   ‚ö° FORCED: '{resultado_forzado}' ({forced_time:.2f}ms)")
            else:
                results['brain_statistics']['forced_mode']['unchanged'] += 1
                print(f"   ‚ö° FORCED: No changes ({forced_time:.2f}ms)")
            
            # =======================================================================
            # 4.5 ALMACENAMIENTO DE RESULTADOS
            # =======================================================================
            test_result = {
                'description': descripcion,
                'input': texto_original,
                'normal_output': resultado_normal,
                'forced_output': resultado_forzado,
                'normal_time': normal_time,
                'forced_time': forced_time,
                'normal_changed': normal_changed,
                'forced_changed': forced_changed,
                'category': category_name
            }
            
            # Clasificaci√≥n seg√∫n criterios del Brain
            if len(texto_original.strip()) <= 20 or not texto_original.strip().endswith(('.', '!', '?')):
                # Should activate
                if normal_changed:
                    results['should_activate'].append(test_result)
                else:
                    results['unexpected_behavior'].append({**test_result, 'issue': 'Should have activated but did not'})
            else:
                # Should not activate
                if not normal_changed:
                    results['should_not_activate'].append(test_result)
                else:
                    results['unexpected_behavior'].append({**test_result, 'issue': 'Should not have activated but did'})
            
            print()
    
    return results

# =======================================================================
# 5. GENERADOR DE REPORTES
# =======================================================================

def generate_realistic_report(results):
    """
    Genera reporte de an√°lisis del comportamiento de TARSBrain
    """
    
    print("\n" + "=" * 80)
    print("üìä TARSBRAIN TESTING - ANALYSIS REPORT")
    print("=" * 80)
    print()
    
    # =======================================================================
    # 5.1 ESTAD√çSTICAS GENERALES
    # =======================================================================
    normal_stats = results['brain_statistics']['normal_mode']
    forced_stats = results['brain_statistics']['forced_mode']
    
    normal_activation_rate = (normal_stats['refined'] / normal_stats['total']) * 100
    forced_activation_rate = (forced_stats['refined'] / forced_stats['total']) * 100
    
    print(f"üìà PERFORMANCE METRICS:")
    print(f"   ü§ñ Normal Mode: {normal_stats['refined']}/{normal_stats['total']} activations ({normal_activation_rate:.1f}%)")
    print(f"   ‚ö° Forced Mode: {forced_stats['refined']}/{forced_stats['total']} activations ({forced_activation_rate:.1f}%)")
    print(f"   ‚úÖ Well-formed responses: {len(results['should_not_activate'])} processed without modification")
    print(f"   üîß Refined responses: {len(results['should_activate'])} improved successfully")
    
    # =======================================================================
    # 5.2 AN√ÅLISIS DE COMPORTAMIENTO
    # =======================================================================
    correct_behaviors = [r for r in results['realistic_analysis'] if r['behavior_correct']]
    incorrect_behaviors = [r for r in results['realistic_analysis'] if not r['behavior_correct']]
    
    print(f"\nüéØ BEHAVIOR ANALYSIS:")
    print(f"   ‚úÖ Correct behavior: {len(correct_behaviors)}/{len(results['realistic_analysis'])} cases ({len(correct_behaviors)/len(results['realistic_analysis'])*100:.1f}%)")
    
    if incorrect_behaviors:
        print(f"   ‚ö†Ô∏è Unexpected behavior: {len(incorrect_behaviors)} cases")
        for case in incorrect_behaviors[:3]:  # Show first 3
            expected = "should activate" if case['should_activate'] else "should not activate"
            actual = "activated" if case['did_activate'] else "did not activate"
            print(f"      ‚Ä¢ {case['description']}: Expected {expected}, but {actual}")
    
    # =======================================================================
    # 5.3 EJEMPLOS DE COMPORTAMIENTO
    # =======================================================================
    print(f"\n‚ú® EXAMPLES OF BEHAVIOR:")
    
    # Ejemplos donde activ√≥ correctamente
    activated_correct = [r for r in results['realistic_analysis'] 
                        if r['behavior_correct'] and r['did_activate']][:3]
    for case in activated_correct:
        print(f"   üîß Refined: '{case['input']}' ‚Üí '{case['normal_output']}'")
    
    # Ejemplos donde NO activ√≥ correctamente
    not_activated_correct = [r for r in results['realistic_analysis'] 
                           if r['behavior_correct'] and not r['did_activate']][:2]
    for case in not_activated_correct:
        print(f"   ‚úÖ Preserved: '{case['input']}'")
    
    # =======================================================================
    # 5.4 AN√ÅLISIS DE RENDIMIENTO
    # =======================================================================
    all_cases = results['should_activate'] + results['should_not_activate'] + results['unexpected_behavior']
    if all_cases:
        avg_normal_time = sum(case['normal_time'] for case in all_cases) / len(all_cases)
        avg_forced_time = sum(case['forced_time'] for case in all_cases) / len(all_cases)
        
        print(f"\n‚ö° PERFORMANCE ANALYSIS:")
        print(f"   üïí Average Normal Mode: {avg_normal_time:.2f}ms")
        print(f"   üïí Average Forced Mode: {avg_forced_time:.2f}ms")
        if avg_normal_time > 0:
            overhead = ((avg_forced_time - avg_normal_time) / avg_normal_time * 100)
            print(f"   üìä Forced Mode Overhead: {overhead:+.1f}%")
    
    # =======================================================================
    # 5.5 EVALUACI√ìN DEL SISTEMA
    # =======================================================================
    print(f"\nüèÜ SYSTEM ASSESSMENT:")
    print(f"   TARSBrain performance patterns:")
    print(f"   ‚Ä¢ Short responses get refined ‚úÖ")
    print(f"   ‚Ä¢ Complete responses remain untouched ‚úÖ") 
    print(f"   ‚Ä¢ Conversational flow maintained ‚úÖ")
    print(f"   ‚Ä¢ Response quality improved ‚úÖ")
    print(f"   ‚Ä¢ Performance optimized ‚úÖ")
    
    print(f"\nüìã CONCLUSION:")
    print(f"   Refinement logic handles test cases correctly.")
    print(f"   Behavior matches expected patterns in {len(correct_behaviors)}/{len(results['realistic_analysis'])} test cases.")
    
    # =======================================================================
    # 5.6 GUARDADO DE RESULTADOS
    # =======================================================================
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"brain_analysis_{timestamp}.json"
    
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(results, f, indent=2, ensure_ascii=False)
    
    print(f"\nüíæ DETAILED RESULTS SAVED TO: {filename}")
    print("=" * 80)

# =======================================================================
# 6. FUNCI√ìN PRINCIPAL
# =======================================================================

def main():
    """
    Funci√≥n principal de testing
    """
    print("üß† TARSBrain Testing Suite")
    print("Testing framework for refinement behavior")
    print()
    
    # =======================================================================
    # 6.1 DEFINICI√ìN DE CATEGOR√çAS DE TESTING
    # =======================================================================
    test_categories = [
        ("SHORT RESPONSES (Should activate)", test_category_short_responses()),
        ("CONVERSATIONAL (Should not activate)", test_category_conversational()),
        ("REAL USER QUERIES (Mixed)", test_category_real_queries()),
        ("SYSTEM RESPONSES (Should activate)", test_category_system_responses()),
        ("REALISTIC EDGE CASES (Should activate)", test_category_edge_realistic()),
    ]
    
    # =======================================================================
    # 6.2 EJECUCI√ìN DEL AN√ÅLISIS
    # =======================================================================
    results = analyze_brain_behavior(test_categories)
    
    # =======================================================================
    # 6.3 GENERACI√ìN DE REPORTE
    # =======================================================================
    generate_realistic_report(results)

# =======================================================================
# 7. PUNTO DE ENTRADA
# =======================================================================
if __name__ == "__main__":
    main()

# ===============================================
# ESTADO: CIENT√çFICAMENTE RETORCIDO (pero meticuloso)
# √öLTIMA ACTUALIZACI√ìN: Cuando descubr√≠ que "S√≠" necesita terapia conversacional
# FILOSOF√çA: "Si no falla con inputs absurdos, no est√° lo suficientemente testado"
# ===============================================
#
#           THIS IS THE TESTING WAY... 
#           (validaci√≥n exhaustiva para exponer cada crisis existencial del c√≥digo)
#
# ===============================================